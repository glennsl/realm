// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");

function make(f) {
  return f;
}

function $$const(value) {
  return (function (f) {
      return Curry._1(f, value);
    });
}

function map(f, task, resolve) {
  return Curry._1(task, (function (value) {
                return Curry._1(resolve, Curry._1(f, value));
              }));
}

function run(receiver, task) {
  return Curry._1(task, receiver);
}

function andThen(f, task, resolve) {
  return Curry._1(task, (function (value) {
                return Curry._2(f, value, resolve);
              }));
}

var Task = /* module */[
  /* make */make,
  /* const */$$const,
  /* map */map,
  /* andThen */andThen,
  /* run */run
];

Jest.describe("Task", (function (param) {
        Jest.testAsync("make", undefined, (function (finish) {
                var expected = "my-value";
                return Curry._1(finish, Jest.Expect[/* toBe */2](expected, Jest.Expect[/* expect */0](expected)));
              }));
        Jest.testAsync("map", undefined, (function (finish) {
                var f = function (x) {
                  return x + 5 | 0;
                };
                var value = Curry._1(f, 3);
                return Curry._1(finish, Jest.Expect[/* toBe */2](8, Jest.Expect[/* expect */0](value)));
              }));
        return Jest.testAsync("const", undefined, (function (finish) {
                      var expected = "my-value";
                      return Curry._1(finish, Jest.Expect[/* toBe */2](expected, Jest.Expect[/* expect */0](expected)));
                    }));
      }));

function $$const$1(value, param) {
  return (function (f) {
      return Curry._1(f, value);
    });
}

function update(updater, model) {
  var value = Curry._1(updater, model);
  return (function (f) {
      return Curry._1(f, value);
    });
}

function do_(f) {
  return f;
}

function andThen$1(f, effect, model) {
  var partial_arg = Curry._1(effect, model);
  return (function (param) {
      return andThen((function (value) {
                    return Curry._2(f, value, model);
                  }), partial_arg, param);
    });
}

function run$1(receiver, model, command) {
  return Curry._2(command, model, receiver);
}

var Effect = /* module */[
  /* const */$$const$1,
  /* update */update,
  /* do_ */do_,
  /* andThen */andThen$1,
  /* run */run$1
];

Jest.describe("Effect", (function (param) {
        Jest.testAsync("const", undefined, (function (finish) {
                var effect = function (param) {
                  return $$const(42);
                };
                return run$1((function (value) {
                              return Curry._1(finish, Jest.Expect[/* toBe */2](42, Jest.Expect[/* expect */0](value)));
                            }), "foo", effect);
              }));
        Jest.testAsync("update", undefined, (function (finish) {
                var effect = function (param) {
                  return $$const(param + 1 | 0);
                };
                return run$1((function (value) {
                              return Curry._1(finish, Jest.Expect[/* toBe */2](3, Jest.Expect[/* expect */0](value)));
                            }), 2, effect);
              }));
        Jest.testAsync("do_", undefined, (function (finish) {
                var effect = function (model) {
                  var value = model + 1 | 0;
                  return (function (f) {
                      return Curry._1(f, value);
                    });
                };
                return run$1((function (value) {
                              return Curry._1(finish, Jest.Expect[/* toBe */2](3, Jest.Expect[/* expect */0](value)));
                            }), 2, effect);
              }));
        return Jest.testAsync("andThen", undefined, (function (finish) {
                      var effect = function (param) {
                        return andThen$1((function (value) {
                                      return (function (param) {
                                          return $$const(param + String(value));
                                        });
                                    }), (function (model) {
                                      var value = Caml_format.caml_int_of_string(model) + 1 | 0;
                                      return (function (f) {
                                          return Curry._1(f, value);
                                        });
                                    }), param);
                      };
                      return run$1((function (value) {
                                    return Curry._1(finish, Jest.Expect[/* toBe */2]("23", Jest.Expect[/* expect */0](value)));
                                  }), "2", effect);
                    }));
      }));

exports.Task = Task;
exports.Effect = Effect;
/*  Not a pure module */
