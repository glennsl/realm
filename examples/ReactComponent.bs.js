// Generated by BUCKLESCRIPT VERSION 5.0.2, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Realm = require("../src/Realm.bs.js");
var React = require("react");
var ReasonReact = require("reason-react/src/ReasonReact.js");

var component = ReasonReact.reducerComponent("Greeting");

function make(onEnter, $$default, _children) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              return React.createElement("input", {
                          value: self[/* state */1],
                          onKeyDown: (function (e) {
                              return Curry._1(self[/* send */3], /* `KeyDown */[
                                          -375877247,
                                          e.keyCode
                                        ]);
                            }),
                          onChange: (function (e) {
                              return Curry._1(self[/* send */3], /* `ValueChanged */[
                                          492430755,
                                          e.target.value
                                        ]);
                            })
                        });
            }),
          /* initialState */(function (param) {
              return $$default;
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              if (action[0] >= 492430755) {
                return /* Update */Block.__(0, [action[1]]);
              } else if (action[1] === 13) {
                Curry._1(onEnter, state);
                return /* Update */Block.__(0, [$$default]);
              } else {
                return /* NoUpdate */0;
              }
            }),
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

var TextInput = /* module */[
  /* component */component,
  /* make */make
];

function textInput($$default) {
  return Curry._1(Realm.React[/* Html */0][/* raw */18], (function (dispatch) {
                var partial_arg = Realm.Core[/* Effect */15][/* const */1];
                var partial_arg$1 = Realm.Core[/* >> */9];
                return ReasonReact.element(undefined, undefined, make((function (param) {
                                  return partial_arg$1(partial_arg, dispatch, param);
                                }), $$default, /* array */[]));
              }));
}

function init(param) {
  return "";
}

function view(model) {
  return Curry._4(Realm.React[/* Html */0][/* div */4], undefined, undefined, undefined, /* :: */[
              textInput(""),
              /* :: */[
                Curry._1(Realm.React[/* Html */0][/* text */2], "In model:" + model),
                /* [] */0
              ]
            ]);
}

var App = Realm.React[/* SimpleApp */2](/* module */[
      /* init */init,
      /* view */view
    ]);

exports.TextInput = TextInput;
exports.textInput = textInput;
exports.App = App;
/* component Not a pure module */
