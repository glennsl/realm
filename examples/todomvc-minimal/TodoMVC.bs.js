// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var RealmNoUpdate = require("../../src/RealmNoUpdate.bs.js");

function create(description, id) {
  return /* record */[
          /* description */description,
          /* completed */false,
          /* editing */false,
          /* id */id
        ];
}

var Entry = /* module */[/* create */create];

var emptyModel = /* record */[
  /* entries : [] */0,
  /* field */"",
  /* uid */0,
  /* visibility */"All"
];

var LocalStorage = /* module */[];

var Json = /* module */[];

function init(param) {
  var match = localStorage.getItem("realm-todo-save");
  if (match == null) {
    return emptyModel;
  } else {
    var match$1 = JSON.parse(match);
    if (match$1 == null) {
      return emptyModel;
    } else {
      return match$1;
    }
  }
}

var partial_arg = RealmNoUpdate.Cmd[/* map */3];

function store(param) {
  return partial_arg((function (model) {
                return model;
              }), (function (param, model) {
                var match = JSON.stringify(model);
                if (match == null) {
                  return model;
                } else {
                  localStorage.setItem("realm-todo-save", match);
                  return model;
                }
              }), param);
}

var add = store(RealmNoUpdate.Cmd[/* make */0]((function (model) {
            return /* record */[
                    /* entries */model[/* field */1] === "" ? model[/* entries */0] : Pervasives.$at(model[/* entries */0], /* :: */[
                            create(model[/* field */1], model[/* uid */2]),
                            /* [] */0
                          ]),
                    /* field */"",
                    /* uid */model[/* uid */2] + 1 | 0,
                    /* visibility */model[/* visibility */3]
                  ];
          })));

function updateField(str) {
  return store(RealmNoUpdate.Cmd[/* make */0]((function (model) {
                    return /* record */[
                            /* entries */model[/* entries */0],
                            /* field */str,
                            /* uid */model[/* uid */2],
                            /* visibility */model[/* visibility */3]
                          ];
                  })));
}

function editingEntry(id, isEditing) {
  var updateEntry = function (t) {
    if (t[/* id */3] === id) {
      return /* record */[
              /* description */t[/* description */0],
              /* completed */t[/* completed */1],
              /* editing */isEditing,
              /* id */t[/* id */3]
            ];
    } else {
      return t;
    }
  };
  return store(RealmNoUpdate.Cmd[/* make */0]((function (model) {
                    return /* record */[
                            /* entries */List.map(updateEntry, model[/* entries */0]),
                            /* field */model[/* field */1],
                            /* uid */model[/* uid */2],
                            /* visibility */model[/* visibility */3]
                          ];
                  })));
}

function updateEntry(id, task) {
  var updateEntry$1 = function (t) {
    if (t[/* id */3] === id) {
      return /* record */[
              /* description */task,
              /* completed */t[/* completed */1],
              /* editing */t[/* editing */2],
              /* id */t[/* id */3]
            ];
    } else {
      return t;
    }
  };
  return store(RealmNoUpdate.Cmd[/* make */0]((function (model) {
                    return /* record */[
                            /* entries */List.map(updateEntry$1, model[/* entries */0]),
                            /* field */model[/* field */1],
                            /* uid */model[/* uid */2],
                            /* visibility */model[/* visibility */3]
                          ];
                  })));
}

function $$delete(id) {
  return store(RealmNoUpdate.Cmd[/* make */0]((function (model) {
                    return /* record */[
                            /* entries */List.filter((function (t) {
                                      return t[/* id */3] !== id;
                                    }))(model[/* entries */0]),
                            /* field */model[/* field */1],
                            /* uid */model[/* uid */2],
                            /* visibility */model[/* visibility */3]
                          ];
                  })));
}

var deleteComplete = store(RealmNoUpdate.Cmd[/* make */0]((function (model) {
            return /* record */[
                    /* entries */List.filter((function (t) {
                              return !t[/* completed */1];
                            }))(model[/* entries */0]),
                    /* field */model[/* field */1],
                    /* uid */model[/* uid */2],
                    /* visibility */model[/* visibility */3]
                  ];
          })));

function check(id, isCompleted) {
  var updateEntry = function (t) {
    if (t[/* id */3] === id) {
      return /* record */[
              /* description */t[/* description */0],
              /* completed */isCompleted,
              /* editing */t[/* editing */2],
              /* id */t[/* id */3]
            ];
    } else {
      return t;
    }
  };
  return store(RealmNoUpdate.Cmd[/* make */0]((function (model) {
                    return /* record */[
                            /* entries */List.map(updateEntry, model[/* entries */0]),
                            /* field */model[/* field */1],
                            /* uid */model[/* uid */2],
                            /* visibility */model[/* visibility */3]
                          ];
                  })));
}

function checkAll(isCompleted) {
  var updateEntry = function (t) {
    return /* record */[
            /* description */t[/* description */0],
            /* completed */isCompleted,
            /* editing */t[/* editing */2],
            /* id */t[/* id */3]
          ];
  };
  return store(RealmNoUpdate.Cmd[/* make */0]((function (model) {
                    return /* record */[
                            /* entries */List.map(updateEntry, model[/* entries */0]),
                            /* field */model[/* field */1],
                            /* uid */model[/* uid */2],
                            /* visibility */model[/* visibility */3]
                          ];
                  })));
}

function changeVisibility(visibility) {
  return store(RealmNoUpdate.Cmd[/* make */0]((function (model) {
                    return /* record */[
                            /* entries */model[/* entries */0],
                            /* field */model[/* field */1],
                            /* uid */model[/* uid */2],
                            /* visibility */visibility
                          ];
                  })));
}

var Html = RealmNoUpdate.MakeHtml(/* module */[]);

function onEnter(action) {
  return Curry._1(Html[/* Attr */1][/* onKeyDown */9], (function (keyCode) {
                if (keyCode === 13) {
                  return action;
                } else {
                  return RealmNoUpdate.Cmd[/* make */0]((function (model) {
                                return model;
                              }));
                }
              }));
}

function viewInput(task) {
  var func = Html[/* input */18];
  var arg = /* :: */[
    Curry._1(Html[/* Attr */1][/* autofocus */1], true),
    /* :: */[
      Curry._1(Html[/* Attr */1][/* name */3], "newTodo"),
      /* :: */[
        Curry._1(Html[/* Attr */1][/* onInput */8], updateField),
        /* :: */[
          onEnter(add),
          /* [] */0
        ]
      ]
    ]
  ];
  var arg$1 = /* `Text */[
    936573133,
    task
  ];
  var arg$2 = function (param) {
    return Curry._5(func, "What needs to be done?", param, "new-todo", arg, arg$1);
  };
  return Curry._4(Html[/* header */8], undefined, "header", undefined, /* :: */[
              Curry._4(Html[/* h1 */9], undefined, undefined, undefined, /* :: */[
                    Curry._1(Html[/* text */4], "todos"),
                    /* [] */0
                  ]),
              /* :: */[
                (function (eta) {
                    return Curry._1(arg$2(undefined), eta);
                  }),
                /* [] */0
              ]
            ]);
}

function viewEntry(todo) {
  var func = Html[/* input */18];
  var arg = /* :: */[
    Curry._1(Html[/* Attr */1][/* onClick */4], check(todo[/* id */3], !todo[/* completed */1])),
    /* [] */0
  ];
  var arg_001 = todo[/* completed */1];
  var arg$1 = /* `Checkbox */[
    111644259,
    arg_001
  ];
  var arg$2 = function (param, param$1) {
    return Curry._5(func, param, param$1, "toggle", arg, arg$1);
  };
  var func$1 = Html[/* input */18];
  var arg$3 = "todo-" + String(todo[/* id */3]);
  var partial_arg = todo[/* id */3];
  var arg$4 = /* :: */[
    Curry._1(Html[/* Attr */1][/* onInput */8], (function (param) {
            return updateEntry(partial_arg, param);
          })),
    /* :: */[
      Curry._1(Html[/* Attr */1][/* onBlur */7], editingEntry(todo[/* id */3], false)),
      /* :: */[
        onEnter(editingEntry(todo[/* id */3], false)),
        /* [] */0
      ]
    ]
  ];
  var arg_001$1 = todo[/* description */0];
  var arg$5 = /* `Text */[
    936573133,
    arg_001$1
  ];
  var arg$6 = function (param) {
    return Curry._5(func$1, param, arg$3, "edit", arg$4, arg$5);
  };
  return Curry._4(Html[/* li */13], undefined, todo[/* editing */2] ? "editing" : "", undefined, /* :: */[
              Curry._4(Html[/* div */7], undefined, "view", undefined, /* :: */[
                    (function (eta) {
                        return Curry._1(arg$2(undefined, undefined), eta);
                      }),
                    /* :: */[
                      Curry._5(Html[/* label */17], undefined, /* :: */[
                            Curry._1(Html[/* Attr */1][/* onDoubleClick */5], editingEntry(todo[/* id */3], true)),
                            /* [] */0
                          ], undefined, undefined, /* :: */[
                            Curry._1(Html[/* text */4], todo[/* description */0]),
                            /* [] */0
                          ]),
                      /* :: */[
                        Curry._4(Html[/* button */5], undefined, "destroy", /* :: */[
                              Curry._1(Html[/* Attr */1][/* onClick */4], $$delete(todo[/* id */3])),
                              /* [] */0
                            ], /* [] */0),
                        /* [] */0
                      ]
                    ]
                  ]),
              /* :: */[
                (function (eta) {
                    return Curry._1(arg$6(undefined), eta);
                  }),
                /* [] */0
              ]
            ]);
}

function viewEntries(visibility, entries) {
  var isVisible = function (todo) {
    switch (visibility) {
      case "Active" : 
          return !todo[/* completed */1];
      case "Completed" : 
          return todo[/* completed */1];
      default:
        return true;
    }
  };
  var allCompleted = List.for_all((function (todo) {
          return todo[/* completed */1];
        }), entries);
  var func = Html[/* input */18];
  var arg = /* :: */[
    Curry._1(Html[/* Attr */1][/* name */3], "toggle-all"),
    /* :: */[
      Curry._1(Html[/* Attr */1][/* onClick */4], checkAll(!allCompleted)),
      /* [] */0
    ]
  ];
  var arg$1 = /* `Checkbox */[
    111644259,
    allCompleted
  ];
  var arg$2 = function (param, param$1) {
    return Curry._5(func, param, param$1, "toggle-all", arg, arg$1);
  };
  var eta = List.map(viewEntry, List.filter(isVisible)(entries));
  var func$1 = Html[/* ul */12];
  return Curry._4(Html[/* section */10], undefined, "main", undefined, /* :: */[
              (function (eta) {
                  return Curry._1(arg$2(undefined, undefined), eta);
                }),
              /* :: */[
                Curry._5(Html[/* label */17], "toggle-all", undefined, undefined, undefined, /* :: */[
                      Curry._1(Html[/* text */4], "Mark all as complete"),
                      /* [] */0
                    ]),
                /* :: */[
                  Curry._2((function (param) {
                            return Curry._2(func$1, param, "todo-list");
                          })(undefined), undefined, eta),
                  /* [] */0
                ]
              ]
            ]);
}

function viewControlsCount(entriesLeft) {
  var item = entriesLeft === 1 ? " item" : " items";
  return Curry._4(Html[/* span */11], undefined, "todo-count", undefined, /* :: */[
              Curry._4(Html[/* strong */14], undefined, undefined, undefined, /* :: */[
                    Curry._1(Html[/* text */4], String(entriesLeft)),
                    /* [] */0
                  ]),
              /* :: */[
                Curry._1(Html[/* text */4], item + " left"),
                /* [] */0
              ]
            ]);
}

function visibilitySwap(uri, visibility, actualVisibility) {
  return Curry._4(Html[/* li */13], undefined, undefined, /* :: */[
              Curry._1(Html[/* Attr */1][/* onClick */4], changeVisibility(visibility)),
              /* [] */0
            ], /* :: */[
              Curry._5(Html[/* a */16], uri, undefined, undefined, visibility === actualVisibility ? "selected" : "", /* :: */[
                    Curry._1(Html[/* text */4], visibility),
                    /* [] */0
                  ]),
              /* [] */0
            ]);
}

function viewControlsFilters(visibility) {
  return Curry._4(Html[/* ul */12], undefined, "filters", undefined, /* :: */[
              visibilitySwap("#/", "All", visibility),
              /* :: */[
                Curry._1(Html[/* text */4], " "),
                /* :: */[
                  visibilitySwap("#/active", "Active", visibility),
                  /* :: */[
                    Curry._1(Html[/* text */4], " "),
                    /* :: */[
                      visibilitySwap("#/completed", "Completed", visibility),
                      /* [] */0
                    ]
                  ]
                ]
              ]
            ]);
}

function viewControlsClear(entriesCompleted) {
  return Curry._4(Html[/* button */5], undefined, "clear-completed", /* :: */[
              Curry._1(Html[/* Attr */1][/* hidden */2], entriesCompleted === 0),
              /* :: */[
                Curry._1(Html[/* Attr */1][/* onClick */4], deleteComplete),
                /* [] */0
              ]
            ], /* :: */[
              Curry._1(Html[/* text */4], "Clear completed (" + (String(entriesCompleted) + ")")),
              /* [] */0
            ]);
}

function viewControls(visibility, entries) {
  var entriesCompleted = List.length(List.filter((function (todo) {
                return todo[/* completed */1];
              }))(entries));
  var entriesLeft = List.length(entries) - entriesCompleted | 0;
  return Curry._4(Html[/* footer */6], undefined, "footer", /* :: */[
              Curry._1(Html[/* Attr */1][/* hidden */2], entries === /* [] */0),
              /* [] */0
            ], /* :: */[
              viewControlsCount(entriesLeft),
              /* :: */[
                viewControlsFilters(visibility),
                /* :: */[
                  viewControlsClear(entriesCompleted),
                  /* [] */0
                ]
              ]
            ]);
}

var infoFooter = Curry._4(Html[/* footer */6], undefined, "info", undefined, /* :: */[
      Curry._4(Html[/* p */15], undefined, undefined, undefined, /* :: */[
            Curry._1(Html[/* text */4], "Double-click to edit a todo"),
            /* [] */0
          ]),
      /* :: */[
        Curry._4(Html[/* p */15], undefined, undefined, undefined, /* :: */[
              Curry._1(Html[/* text */4], "Written by "),
              /* :: */[
                Curry._5(Html[/* a */16], "https://github.com/glennsl", undefined, undefined, undefined, /* :: */[
                      Curry._1(Html[/* text */4], "Glenn Slotte"),
                      /* [] */0
                    ]),
                /* [] */0
              ]
            ]),
        /* :: */[
          Curry._4(Html[/* p */15], undefined, undefined, undefined, /* :: */[
                Curry._1(Html[/* text */4], "Based on "),
                /* :: */[
                  Curry._5(Html[/* a */16], "https://github.com/evancz/elm-todomvc", undefined, undefined, undefined, /* :: */[
                        Curry._1(Html[/* text */4], "evancz/elm-todomvc"),
                        /* [] */0
                      ]),
                  /* [] */0
                ]
              ]),
          /* :: */[
            Curry._4(Html[/* p */15], undefined, undefined, undefined, /* :: */[
                  Curry._1(Html[/* text */4], "Part of "),
                  /* :: */[
                    Curry._5(Html[/* a */16], "http://todomvc.com", undefined, undefined, undefined, /* :: */[
                          Curry._1(Html[/* text */4], "TodoMVC"),
                          /* [] */0
                        ]),
                    /* [] */0
                  ]
                ]),
            /* [] */0
          ]
        ]
      ]
    ]);

function view(model) {
  return Curry._4(Html[/* div */7], undefined, "todomvc-wrapper", undefined, /* :: */[
              Curry._4(Html[/* section */10], undefined, "todoapp", undefined, /* :: */[
                    viewInput(model[/* field */1]),
                    /* :: */[
                      viewEntries(model[/* visibility */3], model[/* entries */0]),
                      /* :: */[
                        viewControls(model[/* visibility */3], model[/* entries */0]),
                        /* [] */0
                      ]
                    ]
                  ]),
              /* :: */[
                infoFooter,
                /* [] */0
              ]
            ]);
}

RealmNoUpdate.mountHtml("todoapp")(init, view);

exports.Entry = Entry;
exports.emptyModel = emptyModel;
exports.LocalStorage = LocalStorage;
exports.Json = Json;
exports.init = init;
exports.store = store;
exports.add = add;
exports.updateField = updateField;
exports.editingEntry = editingEntry;
exports.updateEntry = updateEntry;
exports.$$delete = $$delete;
exports.deleteComplete = deleteComplete;
exports.check = check;
exports.checkAll = checkAll;
exports.changeVisibility = changeVisibility;
exports.Html = Html;
exports.onEnter = onEnter;
exports.viewInput = viewInput;
exports.viewEntry = viewEntry;
exports.viewEntries = viewEntries;
exports.viewControlsCount = viewControlsCount;
exports.visibilitySwap = visibilitySwap;
exports.viewControlsFilters = viewControlsFilters;
exports.viewControlsClear = viewControlsClear;
exports.viewControls = viewControls;
exports.infoFooter = infoFooter;
exports.view = view;
/* add Not a pure module */
